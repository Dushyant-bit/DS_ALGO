#include<bits/stdc++.h>
using namespace std;
class graph{
map<int,list<int>> L;
public:
    void Addedge(int x,int y,bool directed=true){
        L[x].push_back(y);
        if(!directed){
            L[y].push_back(x);
        }
    }
    bool cycle_helper(int node,bool *visited,int parent){

    visited[node]=true;
    for(auto nbr:L[node]){
        if(!visited[nbr]){
            bool got_cycle=cycle_helper(nbr,visited,node);
            if(got_cycle){
                return true;
            }
        }//nbr is visited but nbr should not be equal to parent
        else if(parent!=nbr){
            return true;
        }
        }
    return false;
    }
    bool contains_cycle(int V){
        //Check for cycle in Directed Graph
        bool *visited=new bool[V];
        for(int i=0;i<V;i++){
            visited[i]=false;
        }
        return cycle_helper(0,visited,-1);
    }

};
int main(){
    graph g;
    g.Addedge(0,1,false);
    g.Addedge(1,2,false);
    g.Addedge(2,3,false);
    if(g.contains_cycle(4)){
        cout<<"Cycle is present ";
    }
    else{
        cout<<"Cycle is not present ";
    }
}