#include<bits/stdc++.h>
using namespace std;
template<typename T>
class graph{
    map<T,list<T>> L;
public:
    void addedge(int x,int y){
        L[x].push_back(y);
        L[y].push_back(x);
    }
    void dfs_helper(T src, map<T,bool> &visited){
        //Recursive Function That will help in traverse
        cout<<src<<" ";
        visited[src]=true;
        //Go to all nbr of that node that is not visited
        for(T nbr:L[src]){
            if(!visited[nbr]){
                dfs_helper(nbr,visited);
            }
        }
    return;
    }
    void dfs(T src){
        map<T,bool> visited;
        for(auto P : L){
            auto node=P.first;
           visited[node]=false;
        }
        dfs_helper(src,visited);
}

};
int main(){
    graph<int> g;
    g.addedge(0,1);
    g.addedge(0,2);
    g.addedge(1,2);
    g.addedge(2,0);
    g.addedge(2,3);
    g.addedge(3,3);
    g.dfs(2);

}