#include<bits/stdc++.h>
using namespace std;
int MOD=1e7+7;
int dp[100][100];
int numways(int R,int C,int P){
    //BASE CASE
    if(dp[0][0]==-1){
        return 0;
    }
    //compute the no. of ways for first row
    for(int i=0;i<R;i++){
        if(dp[i][0]==-1){
            break;
        }
        dp[i][0]=1;
    }
    //compute the no. of ways for first column
    for(int i=0;i<C;i++){
        if(dp[0][i]==-1){
            break;
        }
        dp[0][i]=1;
    }
    //Bottom Up approach for rest of matrix
    for(int i=1;i<R;i++){
        for(int j=1;j<C;j++) {
            //If cell is blocked just leave it
            if (dp[i][j] == -1) {
                continue;
            }
            if (dp[i][j - 1] != -1) {
                dp[i][j] = (dp[i][j - 1]) % MOD;
            }
            if (dp[i - 1][j] != -1) {
                dp[i][j] = (dp[i][j] + dp[i - 1][j]) % MOD;
            }
        }}
            if(dp[R-1][C-1]==-1){
                return 0;
            }
return dp[R-1][C-1];

}
int main(){
    memset(dp,0,sizeof(dp));
    int M,N,P;
    cin>>M>>N>>P;
    for(int i=0;i<P;i++){
        int x,y;
        cin>>x>>y;
        //Mark Up all block
        dp[x-1][y-1]=-1;
    }
     cout<<numways(M,N,P);
}