//Cycle Detection Directed Graph Using DFS
#include<iostream>
#include<list>
using namespace std;
class graph{
    list<int> *l;
    int V;
public:
    graph(int V){
        this->V=V;
       l=new list<int>[V];
    }

    void addEdge(int x,int y){
    l[x].push_back(y);
    }
    bool Cycle_Detector(int node,bool *visited,bool *stack){
        //Visit a Node
        visited[node]=true;
        stack[node]=true;
        for(int nbr:l[node]){
            if(stack[nbr]){
                return true;
            }
            else if(!visited[nbr]){
                bool Got_Cycle=Cycle_Detector(nbr,visited,stack);
                if(Got_Cycle){
                return true;
                }
            }
        }
        stack[node]=false;
       return false;
    }
    bool cycle()
    {
    //Check for Cycle in Directed Graph
    bool *visited=new bool[V];
    bool *stack=new bool[V];
    for(int i=0;i<V;i++){
        visited[i]=stack[i]=false;
    }
    return Cycle_Detector(0,visited,stack);}
};
int main(){
    graph g(7);
    g.addEdge(0,1);
    g.addEdge(1,2);
    g.addEdge(2,3);
    g.addEdge(3,4);
    g.addEdge(4,5);
    g.addEdge(1,5);
    g.addEdge(5,6);
   // g.addEdge(4,2);//Back Edge
    if(g.cycle()){
        cout<<"Cycle is present";
    }
    else{
        cout<<"Cycle is not present";
    }
}